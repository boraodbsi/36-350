sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, df)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, df2)
roundval = round(predict(output, type = "response"))
table = table(roundval, df2$class)
table
prop = (table[1,2]+table[2,1])/sum(table)
prop
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, df2)
roundval = round(predict(output, type = "response"))
table = table(roundval, df2$class)
table
prop = (table[1,2]+table[2,1])/sum(table)
prop
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
sample = data.frame(rbind(data1, data2))
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, sample)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
samplez = data.frame(rbind(data1, data2))
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, sample)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
samplez = data.frame(rbind(data1, data2))
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= samplez)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
samplez = (rbind(data1, data2))
samplez
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= samplez)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
samplez = matrix((rbind(data1, data2)))
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= samplez)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
samplez = data.frame((rbind(data1, data2)))
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= samplez)
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),
col = "blue") + geom_point(aes(x=x2, y=y2),
col = "orange")
df2 = data.frame(x=c(data1[,1],data1[,2]),y=c(data2[,1],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= df2)
roundval = round(predict(output, type = "response"))
table = table(roundval, df2$class)
table
prop = (table[1,2]+table[2,1])/sum(table)
prop
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),col = "blue") + geom_point(aes(x=x2, y=y2), col = "orange")
df2 = data.frame(x=c(data1[,1],data2[,1]),y=c(data1[,2],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= df2)
roundval = round(predict(output, type = "response"))
table = table(roundval, df2$class)
table
prop = (table[1,2]+table[2,1])/sum(table)
prop
set.seed(101)
n     = 1000
theta = sort(runif(n,0,4*pi))
r     = sqrt(theta)*theta
x     = r*cos(theta) + rnorm(n,sd=0.2*theta)
y     = r*sin(theta) + rnorm(n,sd=0.2*theta)
data  = cbind(x,y)
color = floor(64*theta/6/pi)
palette(rainbow(64))
plot(x,y,col=color,pch=19)
# FILL ME IN
df.x = data.frame(x)
df.y = data.frame(y)
x.1 = prcomp(df.x, scale = TRUE)
y.1 = prcomp(df.y, scale = TRUE)
score.1 = as.matrix(scale(df.x)) %*% x.1$rotation
score.2 = as.matrix(scale(df.y)) %*% y.1$rotation plot(score.1, score.2, col= color, pch = 19)
# FILL ME IN
df.x = data.frame(x)
df.y = data.frame(y)
x.1 = prcomp(df.x, scale = TRUE)
y.1 = prcomp(df.y, scale = TRUE)
score.1 = as.matrix(scale(df.x)) %*% x.1$rotation
score.2 = as.matrix(scale(df.y)) %*% y.1$rotation
plot(score.1, score.2, col= color, pch = 19)
# pick a value of epsilon
#epsilon = 0.5
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
# pick a value of epsilon
epsilon = 0.5
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
= sqrt(apply(K,1,sum))
# pick a value of epsilon
epsilon = 0.5
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 10
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 20
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 50
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 100
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 200
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 500
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 1000
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 2000
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 10000
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 100000
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 1000
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# pick a value of epsilon
epsilon = 500
# uncomment below
D = as.matrix(dist(data))  # compute pairwise Euclidean distance
K = exp(-D^2/epsilon)      # compute "similarity" matrix
v = sqrt(apply(K,1,sum))
A = K/(v %*% t(v))         # apply graph Laplacian normalization
# apply eigendecomposition to A and plot the second vector vs. the first
decomp = eigen(A)$vectors
plot(decomp[,1], decomp[,2], col = color, pch=19)
# FILL ME IN
library(MASS)
mu = c(2,2)
sig1 = 1
sig2 = 2
rho12 = -0.5
Sigma = matrix(c(sig1^2, rho12*sig1*sig2, rho12*sig1*sig2, sig2^2), nrow = 2)
sample = c()
for (i in 1:1000) {
my.data = mvrnorm(100, mu, Sigma)
my.df = data.frame(my.data)
dist = cor(my.df)
sample[i]=dist[1,2]
}
hist(sample)
abline(v = -0.5, col = "red")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
# FILL ME IN
x = c(1,1)
mu = c(2,2)
sig.1 = 2
sig.2 = 2
rho = 0
Sigma = matrix(c(4, rho*4, 4*rho, 4), nrow = 2)
Sigma
fx = (1/sqrt(16*(2*pi)^2))*(exp(-0.5*(t(x-mu))%*%solve(Sigma)%*%(x-mu)))
fx
# FILL ME IN
rho=0.5
Sigma = matrix(c(4, rho*4, 4*rho, 4), nrow = 2)
Sigma
x = seq(0,7,by=1)
y = seq(0,7,by=1)
m = matrix(NA,nrow=8,ncol=8)
for (i in x) {
for (j in y) {
m[i,j] = dmvnorm(c(i,j),mu,Sigma)
}
}
length(x)
length(y)
dim(m)
contour(x,y,m)
# FILL ME IN
library(MASS)
mu = c(2,2)
sig1 = 1
sig2 = 2
rho12 = -0.5
Sigma = matrix(c(sig1^2, rho12*sig1*sig2, rho12*sig1*sig2, sig2^2), nrow = 2)
sample = c()
for (i in 1:1000) {
my.data = mvrnorm(100, mu, Sigma)
my.df = data.frame(my.data)
dist = cor(my.df)
sample[i]=dist[1,2]
}
hist(sample)
abline(v = -0.5, col = "red")
Sigma
# FILL ME IN
library(ggplot2)
mu = c(2,3,4)
sig1 = 1
sig2 = 2
sig3 = 1
rho12 = 0.4
rho13 = 0.7
rho23 = -0.2
Sigma = matrix(c(sig1^2, rho12*sig1*sig2, rho13*sig1*sig3, rho12*sig2*sig1, sig2^2, rho23*sig2*sig3, rho13*sig3*sig1, rho23*sig3*sig2, sig3^2), nrow = 3)
p = c(1,3)
mu.marginal = mu[p]
Sigma.marginal = Sigma[p,p]
fx = mvrnorm(1000,mu.marginal,Sigma.marginal)
mean(fx[,1])
mean(fx[,2])
df = data.frame(x = fx[,1], y = fx[,2])
Sigma
ggplot(data=df,mapping=aes(x=x,y=y)) + geom_point(col = "blue")
# FILL ME IN
mu1 = c(1,1)
sig11 = 1.2
sig21 = 1.2
rho1 = 0.4
mu2 = c(3,3)
sig12 = 1
sig22 = 1
rho2 = -0.6
Sigma1 = matrix(c(sig11^2, rho1*sig11*sig21, rho1*sig11*sig21, sig21^2), nrow = 2)
data1 = mvrnorm(100, mu1, Sigma1)
Sigma2 = matrix(c(sig12^2, rho2*sig12*sig22, rho2*sig12*sig22, sig22^2), nrow = 2)
data2 = mvrnorm(100, mu2, Sigma2)
df = data.frame(x = data1[,1], y = data1[,2], x2 = data2[,1], y2 = data2[,2])
Sigma1
Sigma2
ggplot(df, aes(x=x, y=y)) + geom_point(aes(x=x, y=y),col = "blue") + geom_point(aes(x=x2, y=y2), col = "orange")
df2 = data.frame(x=c(data1[,1],data2[,1]),y=c(data1[,2],data2[,2]), class = c(rep(c(0), 100), rep(c(1), 100)))
output = glm(class~., family = binomial, data= df2)
roundval = round(predict(output, type = "response"))
table = table(roundval, df2$class)
table
prop = (table[1,2]+table[2,1])/sum(table)
prop
